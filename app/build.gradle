plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "io.github.lordraydenmk.superheroes"
        minSdk 28
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "io.github.lordraydenmk.superheroesapp.TestRunner"

        if (project.hasProperty("marvel_public_api_key")) {
            def marvelPublicKey = '"' + project.property("marvel_public_api_key") + '"'
            def marvelPrivateKey = '"' + project.property("marvel_private_api_key") + '"'
            buildConfigField("String", "MARVEL_PUBLIC_API_KEY", marvelPublicKey)
            buildConfigField("String", "MARVEL_PRIVATE_API_KEY", marvelPrivateKey)
        } else {
            // the app needs `marvel_public_api_key` and `marvel_private_api_key`
            // as gradle properties to run
            // to get one visit: https://developer.marvel.com/account
            throw new GradleException("Please provide the Marvel API keys as gradle properties")
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.2.0"
    }

    sourceSets {
        test.java.srcDirs += "src/testFixtures/kotlin"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xuse-experimental=androidx.compose.foundation.ExperimentalFoundationApi"
        ]
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
        animationsDisabled = true

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        test.java.srcDirs += "src/testFixtures/kotlin"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
}

dependencies {
    implementation project(":lib")

    def retrofit = "2.9.0"
    def okhttp = "4.10.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation "io.coil-kt:coil-compose:2.1.0"
}